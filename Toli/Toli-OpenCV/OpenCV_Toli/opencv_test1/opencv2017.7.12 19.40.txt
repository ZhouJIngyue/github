#include <opencv2/highgui/highgui.hpp>  
#include <opencv2/imgproc/imgproc.hpp>  
#include <opencv2/core/core.hpp>  

using namespace cv;  


int main()  
{  
	VideoCapture cap(0);  
	if(!cap.isOpened())  
	{  
		return -1;  
	}  
	Mat frame;  
	Mat edges;  
	vector<Mat> channels;
	Mat deal;
	Mat deal2;

	bool stop = false;  
	while(!stop)  
	{  
		cap>>frame;  
		//cvtColor(frame, edges, CV_BGR2GRAY);  
		//GaussianBlur(edges, edges, Size(7,7), 1.5, 1.5);  
		//Canny(edges, edges, 0, 30, 3);  
		//imshow("当前视频",edges);
		split(frame,channels);
		//addWeighted( channels.at(2), 1, channels.at(1), -1.5, 0.0,deal);
		//addWeighted( deal, 1, channels.at(0), 0.5, 0.0,deal);
		addWeighted( channels.at(2), 1, channels.at(0), -0.9, 0.0,deal);
		addWeighted( deal, 1, channels.at(1), -0.4, 0.0,deal);
		threshold(deal,deal,60,255,THRESH_BINARY);
		imshow("当前视频",frame);  
		imshow("当前视频b",channels.at(0));  
		imshow("当前视频g",channels.at(1));  
		imshow("当前视频r",channels.at(2));  
		imshow("处理后的",deal); 
		if(waitKey(30) >=0)  
			stop = true;  
	}  
	return 0;  
}  


//
///**
// * @file objectDetection.cpp
// * @author A. Huaman ( based in the classic facedetect.cpp in samples/c )
// * @brief A simplified version of facedetect.cpp, show how to load a cascade classifier and how to find objects (Face + eyes) in a video stream
// */
//#include "opencv2/objdetect/objdetect.hpp"
//#include "opencv2/highgui/highgui.hpp"
//#include "opencv2/imgproc/imgproc.hpp"
//
//#include <iostream>
//#include <stdio.h>
//
//using namespace std;
//using namespace cv;
//
///** Function Headers */
//void detectAndDisplay( Mat frame );
//
///** Global variables */
////-- Note, either copy these two files from opencv/data/haarscascades to your current folder, or change these locations
//String face_cascade_name = "haarcascade_frontalface_alt.xml";
//String eyes_cascade_name = "haarcascade_eye_tree_eyeglasses.xml";
//CascadeClassifier face_cascade;
//CascadeClassifier eyes_cascade;
//string window_name = "Capture - Face detection";
//RNG rng(12345);
//
///**
// * @function main
// */
//int main( void )
//{
//  //VideoCapture capture;
//  Mat frame;
//
//  //-- 1. Load the cascades
//  if( !face_cascade.load( face_cascade_name ) ){ printf("--(!)Error loading\n"); return -1; };
//  if( !eyes_cascade.load( eyes_cascade_name ) ){ printf("--(!)Error loading\n"); return -1; };
//
//  //-- 2. Read the video stream
//   VideoCapture capture(0);
//  //capture.open( -1 );
//  if( capture.isOpened() )
//  {
//    for(;;)
//    {
//      capture >> frame;
//
//      //-- 3. Apply the classifier to the frame
//      if( !frame.empty() )
//       { detectAndDisplay( frame ); }
//      else
//       { printf(" --(!) No captured frame -- Break!"); break; }
//
//      int c = waitKey(10);
//      if( (char)c == 'c' ) { break; }
//
//    }
//  }
//
//  return 0;
//}
//
///**
// * @function detectAndDisplay
// */
//void detectAndDisplay( Mat frame )
//{
//   std::vector<Rect> faces;
//   Mat frame_gray;
//
//   cvtColor( frame, frame_gray, COLOR_BGR2GRAY );
//   equalizeHist( frame_gray, frame_gray );
//   //-- Detect faces
//   face_cascade.detectMultiScale( frame_gray, faces, 1.1, 2, 0|CV_HAAR_SCALE_IMAGE, Size(30, 30) );
//
//   for( size_t i = 0; i < faces.size(); i++ )
//    {
//      Point center( faces[i].x + faces[i].width/2, faces[i].y + faces[i].height/2 );
//      ellipse( frame, center, Size( faces[i].width/2, faces[i].height/2), 0, 0, 360, Scalar( 255, 0, 255 ), 2, 8, 0 );
//
//   //   Mat faceROI = frame_gray( faces[i] );
//   //   std::vector<Rect> eyes;
//
//   //   //-- In each face, detect eyes
//   //   eyes_cascade.detectMultiScale( faceROI, eyes, 1.1, 2, 0 |CV_HAAR_SCALE_IMAGE, Size(30, 30) );
//
//   //   for( size_t j = 0; j < eyes.size(); j++ )
//   //    {
//   //      Point eye_center( faces[i].x + eyes[j].x + eyes[j].width/2, faces[i].y + eyes[j].y + eyes[j].height/2 );
//   //      int radius = cvRound( (eyes[j].width + eyes[j].height)*0.25 );
//   //      circle( frame, eye_center, radius, Scalar( 255, 0, 0 ), 3, 8, 0 );
//   //    }
//    }
//   //-- Show what you got
//   imshow( window_name, frame );
//}
